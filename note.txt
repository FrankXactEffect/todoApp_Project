============================================================
//FieldButtonbar.jsx
//default value of the todo
    const [todo, setTodo] = useState({ title: "", done: false });
    const [todoArr, setTodoArr] = useState([]);

    //if it has object ? then the object is parsed and gotten
    let todos = localStorage.hasOwnProperty("todos")
        ? JSON.parse(localStorage.getItem("todos"))
        : []

    const onChange = (event) => {
        //destructuring the value from the object
        let { value } = event.target
        let obj = {}
        obj["title"] = value
        obj["done"] = false
        setTodo(obj)
    }

    // creating the function that will trigger the event on the button
    const createTodo = (event) => {
        //get the property
        const { name } = event.target
        if (event.key === "Enter" || name === "addTodo") {
            if (todo.title !== "") {
                //push or add from the top
                todos.unshift(todo)
                localStorage.setItem('todos', JSON.stringify(todos))
                //clear input field
                setTodo({ title: "", done: false })
            } else {
                alert("Oop!,Please write todo first❌")
            }
        }
    }

    const completeTodo = (i) => {
        if (todos[i]["done"] !== true) {
            todos[i]["done"] = true
            localStorage.setItem("todos", JSON.stringify(todos))
            setTodoArr(todos)
            alert("Todo Completed!✅");
        }
    }

    const deleteTodo = (i) => {

        todos.splice(i, 1)
        localStorage.setItem('todos', JSON.stringify(todos))
        setTodoArr(todos)


    }
    // const editTodo = (i) =>{
    //     const findTodo = todos.find((todo) => todo.id === id);
    //     localStorage.setItem('todos', JSON.stringify(todos))
    //     setTodoArr(findTodo)
    // }





        <>
            <div className='field-button-container'>
                <div className='text-field'><input type="text" name="todo" placeholder='What would you like to do ?'
                    value={todo.title} onKeyPress={createTodo} onChange={onChange} /></div>
                <div className='btn-addTodo'>< button type='button' name='addTodo' onClick={createTodo}>Add</button></div>
            </div>

            {/* passing props */}
            <TodoList todoArr={todoArr}
                completeTodo={completeTodo}
                deleteTodo={deleteTodo}


            />
        </>

============================================================


=============================================================

// const change = (text) => {
        setStatus(text)
    }

import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import { format } from 'date-fns'

    const { completeTodo, deleteTodo } = props
    let todoArr = props.todoArr.length > 0
        ? props.todoArr : JSON.parse(localStorage.getItem('todos'))

    const date = new Date();
    const showTime = date.getHours()
        + ':' + date.getMinutes()
        + ":" + date.getSeconds();






            <div className='todo-caption'>Todo List</div>
            <div className='columns-titles'>
                <div id='one-col'>List</div>
                <div id='two-col'>Status</div>
                <div id='two-col'>Edit</div>
                <div id='two-col'>Delete</div>
            </div>
            <div className='todo-list'>
                <ul>
                    {/* traversing the todo array */}
                    {todoArr && todoArr.length > 0 ?
                        todoArr.map((el, i) => (

                            <li key={i} className='todo-list-item'>

                                <div id='list-content' className={el["done"] ? "line-through" : null}>{el.title} <p className='time-date'><i> {format(new Date(), 'do MMMM Y')}  {showTime}</i></p> </div>

                                <div id='list-action' title='Complete' className={`pointer ${el["done"] ? "green" : "blue"}`} onClick={() => completeTodo(i)}>Completed</div>
                                <EditIcon id='list-action' title="Complete" className='editIcon' />
                                <DeleteIcon id='list-action' className='deleteIcon' title="Delete" onClick={() => { deleteTodo(i) }} />

                            </li>

                        )) : null
                    }

                </ul>
            </div>
=============================================================



    const [title, setTitle] = useState("");
    // const [status, setStatus] = useState("pendings")

    const dispatch = useDispatch()

    const handleSubmit = (e) => {
        e.preventDefault();
        //adds todo if title exisit
        if (title) {
            dispatch(
                addTodo({
                    id: uuid(),
                    title,
                    time: new Date().toLocaleString(),
                })
            );
            toast.success('Task Added Successfully')

        } else {
            toast.error("title shouldn't be empty")
        }

        setTitle("")
    }


============================================

import React from 'react'
import { useSelector } from 'react-redux'
import TodoItem from '../todoitem/TodoItem';
// import './todoList.css'


// import { MaximizeSharp } from '@mui/icons-material';
function TodoList() {

    const todoList = useSelector((state) => state.todo.todoList);


    //sort todo list by time
    const sortedTodoList = [...todoList];
    sortedTodoList.sort((a, b) => new Date(b.time) - new Date(a.time));

    return (
        <div className="todo-list-container">
            <div>
                {sortedTodoList && sortedTodoList.length > 0
                    ? sortedTodoList.map((todo) => )
                    : ''}


            </div>
        </div>

    )
}

export default TodoList




.taskListContainer {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    margin-top: 10%;
    background-color: burlywood;
    width: 75%;
    height: 190px;
    margin-left: 11%;
}


@media screen and (max-width:800px) {
    .taskListContainer {
        margin-top: 27%;
    }

}


https://to-do-service-backend-tutorial.onrender.com/new/:id/delete/:id/update/:id


